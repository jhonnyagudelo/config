"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const LanguageID = 'php';
let languageClient;
function activate(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let workspaceConfig = coc_nvim_1.workspace.getConfiguration();
        const config = workspaceConfig.get("phpactor");
        const enable = config.enable;
        if (enable === false)
            return;
        languageClient = createClient(config);
        languageClient.start();
    });
}
exports.activate = activate;
function createClient(config) {
    if (!config.path) {
        coc_nvim_1.workspace.showMessage("Configure `phpactor.path` with path to Phpactor (e.g. phpactor, or /path/to/phpactor)", "error");
        return;
    }
    let serverOptions = {
        run: {
            command: config.path,
            args: [
                "language-server"
            ]
        },
        debug: {
            command: "phpactor",
            args: [
                "language-server"
            ]
        },
    };
    let clientOptions = {
        documentSelector: [
            { language: LanguageID, scheme: 'file' },
            { language: LanguageID, scheme: 'untitled' }
        ],
        initializationOptions: config.config
    };
    languageClient = new coc_nvim_1.LanguageClient("phpactor", "Phpactor Language Server", serverOptions, clientOptions);
    coc_nvim_1.commands.registerCommand('phpactor.reindex', reindex);
    coc_nvim_1.commands.registerCommand('phpactor.config.dump', dumpConfig);
    coc_nvim_1.commands.registerCommand('phpactor.services.list', servicesList);
    coc_nvim_1.commands.registerCommand('phpactor.status', status);
    return languageClient;
}
function reindex() {
    if (!languageClient) {
        return;
    }
    languageClient.sendRequest('indexer/reindex');
}
function dumpConfig() {
    if (!languageClient) {
        return;
    }
    languageClient.sendRequest('session/dumpConfig');
}
function servicesList() {
    if (!languageClient) {
        return;
    }
    languageClient.sendRequest('service/running');
}
function status() {
    if (!languageClient) {
        return;
    }
    languageClient.sendRequest('system/status');
}
//# sourceMappingURL=extension.js.map